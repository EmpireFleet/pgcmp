#!/bin/bash

# Optional configuration:
PGBINDIR=${PGBINDIR:-${PGBINDIR:-"/var/lib/postgresql/dbs/postgresql-9.1/bin"}}
WORKDIR=${WORKDIR:-"/tmp"}
PSQL="${PGBINDIR}/psql --pset pager=off "

DB1=${DB1:-"slonyregress1"}
HOST1=${HOST1:-"localhost"}
USER1=${USER1:-${PGUSER:-"postgres"}}
PORT1=${PORT1:-${PGPORT:-"5432"}}

DB2=${DB2:-"slonyregress2"}
HOST2=${HOST2:-"localhost"}
USER2=${USER2:-${PGUSER:-"postgres"}}
PORT2=${PORT2:-${PGPORT:-"5432"}}

DBW=${DBW:-"comparisondatabase"}
HOSTW=${HOSTW:-"localhost"}
USERW=${USERW:-${PGUSER:-"postgres"}}
PORTW=${PORTW:-${PGPORT:-"5432"}}

OMITSCHEMAS=${OMITSCHEMAS:-"('pg_catalog','information_schema')"}

LABEL1=${LABEL1:-"${HOST1}-${PORT1}-${DB1}"}
LABEL2=${LABEL2:-"${HOST2}-${PORT2}-${DB2}"}

EXPLANATIONS=${EXPLANATIONS:-"${WORKDIR}/explanations.txt"}
FULLOUTPUT=${FULLOUTPUT:-"${WORKDIR}/fulloutput.txt"}
UNEXPLAINED=${UNEXPLAINED:-"${WORKDIR}/unexplained.txt"}
BADEXPLAIN=${BADEXPLAIN:-"${WORKDIR}/badexplanations.txt"}
COPY1="${WORKDIR}/${LABEL1}.copy"
COPY2="${WORKDIR}/${LABEL2}.copy"

echo "Generating schema from databases:
   DB1- ${LABEL1} -d ${DB1} -h ${HOST1} -p ${PORT1}
   DB2- ${LABEL2} -d ${DB2} -h ${HOST2} -p ${PORT2}

Output to:
  ${COPY1}
  ${COPY2}

Work Database:
   DBW- ${LABELW} -d ${DBW} -h ${HOSTW} -p ${PORTW}

Schemas to be omitted from comparison:
   ${OMITSCHEMAS}

Explanations Input list (EXPLANATIONS): [${EXPLANATIONS}]
Full output: (FULLOUTPUT) [${FULLOUTPUT}]
Unexplained items output: (UNEXPLAINED) [${UNEXPLAINED}]
Unexplained items as explanation: (BADEXPLAIN) [${BADEXPLAIN}]
"

function extract_schema_data () {
    local LABEL=$1
    local WHEN=`date`
    echo "-- extract_schema_data.sh {label=${LABEL}}"
    echo "-- extracting schema information into file ${OUTFILE}"
    echo "-- based on libpq parameters: 
--   PGHOST=${PGHOST}
--   PGDATABASE=${PGDATABASE}
--   PGPORT=${PGPORT}
--   PGUSER=${PGUSER}
--   as at ${WHEN}"

# Pull data for major object types:
# Roles
    RQ=" select 'role', NULL::text, rolname, 'rolcreaterole:'|| (rolcreaterole::text) || ',rolcreatedb:' || (rolcreatedb::text) ||',rolcanlogin:'||(rolcanlogin::text)
from pg_catalog.pg_roles"

# Schemas
# a) Existence
    SCEQ="
select 'schema', schema_name, schema_name, schema_owner from information_schema.schemata"

# b) Permissions
    SCP="
select 'schema permissions', nspname, nspname, nspacl::text from pg_catalog.pg_namespace"

# Tables
    TEQ="
select case when table_type = 'BASE TABLE' then 'table'
            when table_type = 'VIEW' then 'view'
            else 'other relation' end,
table_schema,
table_schema || '.' || table_name, NULL::text
from information_schema.tables"

    TOWN="
select case when c.relkind = 'r' then 'table owner'
            when c.relkind = 'v' then 'view owner' end, 
        n.nspname,
        n.nspname || '.' || c.relname, r.rolname
from pg_class c, pg_namespace n, pg_roles r
where n.oid = c.relnamespace and r.oid = c.relowner
and c.relkind in ('v', 'r')"

    COLS="
select 'column', table_schema, table_schema|| '.' || table_name || '.' || column_name,
'type:' || data_type || 
',maxlen:' || coalesce(character_maximum_length::text, coalesce(character_octet_length::text, coalesce(numeric_precision::text, 'n/a'))) ||
',nullable:'||is_nullable || ',default:' ||  coalesce(column_default, 'NULL')
from information_schema.columns"

    TPERM="
select case when c.relkind = 'r' then 'table permissions'
            when c.relkind = 'S' then 'sequence permissions'
            when c.relkind = 'v' then 'view permissions' end,
       n.nspname,
       n.nspname || '.' || c.relname, c.relacl::text
from pg_class c, pg_namespace n, pg_roles r
where n.oid = c.relnamespace and r.oid = c.relowner
and c.relkind in ('v', 'r', 'S')"

    TSEQ="
select 'sequence', sequence_schema, sequence_schema || '.' || sequence_name, 
    'start:' || start_value::text || ',min:' || minimum_value::text || ',max:' || maximum_value::text || ',increment:' || increment::text || ',cycles:' || cycle_option
from information_schema.sequences"

    VDEF="
select 'view definition', table_schema, table_schema|| '.' || table_name, view_definition
from information_schema.views"


    FCODE="
select 'function definition', r.specific_schema, r.specific_schema || '.' || p.oid::regprocedure::text, r.routine_definition 
from information_schema.routines r, pg_catalog.pg_proc p 
where r.specific_name = p.proname || '_' || p.oid "

    FPERM1="
select 'function permissions', rp.specific_schema, p.oid::regprocedure::text || '-role:' || rp.grantee,
'privilege_type:' || rp.privilege_type || ',is_grantable:' || rp.is_grantable
from information_schema.routine_privileges rp, pg_proc p
where rp.specific_name = p.proname || '_' || p.oid"

    FOWNER="
select 'function owner', n.nspname, p.oid::regprocedure::text, r.rolname
from pg_catalog.pg_roles r, pg_catalog.pg_proc p, pg_catalog.pg_namespace n
where r.oid = p.proowner and n.oid = p.pronamespace"

    FLANGUAGE="
select 'function language', r.specific_schema, r.specific_schema || '.' || p.oid::regprocedure::text, r.external_language
from information_schema.routines r, pg_catalog.pg_proc p
where
    r.specific_name = p.proname || '_' || p.oid "

    FSECTYPE="
select 'function security type', r.specific_schema, r.specific_schema || '.' || p.oid::regprocedure::text, r.security_type
from information_schema.routines r, pg_catalog.pg_proc p
where 
    r.specific_name = p.proname || '_' || p.oid"

    FCONFIG="
select 'function config', n.nspname, p.oid::regprocedure::text, p.proconfig::text
from pg_catalog.pg_proc p, pg_catalog.pg_namespace n
where n.oid = p.pronamespace"

    TRIGGERS="
select 'trigger', t.trigger_schema, t.trigger_schema || '.' || t.event_object_table || '.' || t.trigger_name ||'/'|| t.event_manipulation, 'action:' || t.action_statement ||',orientation:'||t.action_orientation || ',timing:' || t.action_timing
from information_schema.triggers t"

    CHECKCON="
select 'check constraint', n.nspname, n.nspname || '.' || r.relname || ':' || c.conname, consrc
from
   pg_catalog.pg_class r, pg_catalog.pg_namespace n, pg_catalog.pg_constraint c
where
   r.oid = c.conrelid and n.oid = c.connamespace and c.consrc is not null"

    INDEXES="
select 'index', schemaname, schemaname || '.' || tablename || ':' || indexname, indexdef
from pg_catalog.pg_indexes"

    FOREIGNKEYS="
select 'foreign key', constraint_schema, constraint_schema || '.' || c.relname || ':' || constraint_name,
unique_constraint_schema || '.' || unique_constraint_name || ',match:' || match_option || ',update_rule:' || update_rule || ',delete_rule:' || delete_rule
from pg_catalog.pg_class c, pg_catalog.pg_constraint pc, information_schema.referential_constraints rc, pg_catalog.pg_namespace n
where
   rc.constraint_schema = n.nspname and
   rc.constraint_name = pc.conname and
   pc.conrelid = c.oid and
   c.relnamespace = n.oid"

    TYPES="
select 'data type', n.nspname, n.nspname || '.' || t.typname, 'length:'||t.typlen::text || ',byval:'||t.typbyval::text||',phystype:'||t.typtype||',category:'||t.typcategory||',ispreferred:'||t.typispreferred::text||',delimiter:'||t.typdelim||'input:'||t.typinput::text||'output:'||t.typoutput::text||'receive:'||t.typreceive::text||'send:'||t.typsend::text||'modin:'||t.typmodin::text||'modout:'||t.typmodout::text||'analyze:'||t.typanalyze::text||'align:'||t.typalign::text||'storage:'||t.typstorage::text||'notnull:'||t.typnotnull::text||'typmod:'||t.typtypmod::text||'ndims:'||t.typndims::text||'collation:'||t.typcollation::text
from pg_catalog.pg_type t, pg_namespace n
where t.typnamespace = n.oid"
    
    TYPEOWNERS="
select 'data type owner', n.nspname, n.nspname || '.' || t.typname, u.usename
from pg_catalog.pg_type t, pg_namespace n, pg_user u
where 
   t.typnamespace = n.oid and u.usesysid = t.typowner"

    OPERATORS="
select 'operator', n.nspname, n.nspname || '.' || t.oprname,
'kind:'|| t.oprkind::text ||
',canmerge:'|| t.oprcanmerge::text ||
',canhash:'|| t.oprcanhash::text ||
',left:'|| t.oprleft::text ||
',right:'|| t.oprright::text ||
',result:'|| t.oprresult::text ||
',com:'|| t.oprcom::text ||
',negate:'|| t.oprnegate::text ||
',code:'|| t.oprcode::text ||
',rest:'|| t.oprrest::text ||
',join:'|| t.oprjoin::text
from pg_catalog.pg_operator t, pg_catalog.pg_namespace n
where 
t.oprnamespace = n.oid"
    
    OPOWNERS="
select 'operator owner', n.nspname, n.nspname || '.' || o.oprname, u.usename
from pg_catalog.pg_operator o, pg_namespace n, pg_user u
where 
   o.oprnamespace = n.oid and u.usesysid = o.oprowner"

    EVERYTHING="
copy ( with pgd_all_data (object_type, object_schema, object_name, object_definition)
      as (
${RQ} 
UNION ALL
${SCEQ}
UNION ALL
${SCP}
UNION ALL
${TEQ}
UNION ALL
${TOWN}
UNION ALL
${TPERM}
UNION ALL
${COLS}
UNION ALL
${TSEQ}
UNION ALL
${VDEF}
UNION ALL
${FCODE}
UNION ALL
${FPERM1}
UNION ALL
${FOWNER}
UNION ALL
${FLANGUAGE}
UNION ALL
${FSECTYPE}
UNION ALL
${FCONFIG}
UNION ALL
${TRIGGERS}
UNION ALL
${CHECKCON}
UNION ALL
${INDEXES}
UNION ALL
${FOREIGNKEYS}
UNION ALL
${TYPES}
UNION ALL
${TYPEOWNERS}
UNION ALL
${OPERATORS}
UNION ALL
${OPOWNERS} )
select '${LABEL}', object_schema, object_type, object_name, object_definition from pgd_all_data
   where object_schema not in (select nspname from pg_catalog.pg_namespace where nspname in ${OMITSCHEMAS} or nspname = 'pg_toast' or nspname like 'pg_temp_%' or nspname like 'pg_toast_temp_%')
)
to stdout;"

echo "${EVERYTHING}"
}

# Run schema extractions
OUTFILE="${WORKDIR}/${LABEL1}.copy"  
extract_schema_data "${LABEL1}" | ${PGBINDIR}/psql -q -d ${DB1} -h ${HOST1} -p ${PORT1} -U ${USER1}  > ${OUTFILE}
retcode=$?
if [ $retcode -ne 0 ]; then
    echo "Could not extract schema data for label ${LABEL1} from database PGDATA=${DB1} PGHOST=${HOST1} PGPORT=${PORT1} PGUSER=${USER1}"
    exit 1
fi

OUTFILE="${WORKDIR}/${LABEL2}.copy"
extract_schema_data "${LABEL2}" | ${PGBINDIR}/psql -q -d ${DB2} -h ${HOST2} -p ${PORT2} -U ${USER2}   > ${OUTFILE}
if [ $retcode -ne 0 ]; then
    echo "Could not extract schema data for label ${LABEL2} from database PGDATA=${DB2} PGHOST=${HOST2} PGPORT=${PORT2} PGUSER=${USER2}"
    exit 1
fi

# Generated data files
echo "Extracted schema data files:"
ls -l ${COPY1} ${COPY2}

# Generate comparison database
${PSQL} -d postgres -h ${HOSTW} -p ${PORTW} -U ${USERW} -c "create database \"${DBW}\""
if [ $retcode -ne 0 ]; then
    echo "Could not establish comparison database from database PGDATA=${DBW} PGHOST=${HOSTW} PGPORT=${PORTW} PGUSER=${USERW}"
    exit 1
fi

COMPARESCRIPT="
drop table if exists data_raw;
create table data_raw (
    label text,
    id serial,
    primary key (id),
    object_schema text,
    object_type text,
    object_name text,
    object_definition text
);
comment on column data_raw.label is 'Label indicating data source';
comment on column data_raw.id is 'unique value to help construct primary key';
comment on column data_raw.object_schema is 'namespace (pg_namespace) containing the object';
comment on column data_raw.object_type is 'type of object';
comment on column data_raw.object_name is 'fully qualified name of the object';
comment on column data_raw.object_definition is 'definition of the object';

create index db1_tnd on data_raw(object_type, object_name);
truncate data_raw;

\\copy data_raw (label, object_schema, object_type, object_name, object_definition) from '${COPY1}';
\\copy data_raw (label, object_schema, object_type, object_name, object_definition) from '${COPY2}';

update data_raw set object_definition = '' where object_definition is null;

drop table if exists raw_differences;
create table raw_differences (
  object_schema text,
  object_name text,
  object_type text,
  label1 text,
  id1 integer references data_raw(id),
  object_definition1 text,
  label2 text, 
  id2 integer references data_raw(id),
  object_definition2 text,
  difference_type text,
  importance integer
);

comment on column raw_differences.object_schema is 'namespace containing the object';
comment on column raw_differences.object_name is 'fully qualified object name';
comment on column raw_differences.object_type is 'type of object';
comment on column raw_differences.label1 is 'Label of 1st data source';
comment on column raw_differences.id1 is 'ID of raw data in 1st data source';
comment on column raw_differences.object_definition1 is 'Definition of object in 1st data source';
comment on column raw_differences.label2 is 'Label of 2nd data source';
comment on column raw_differences.id2 is 'ID of raw data in 2nd data source';
comment on column raw_differences.object_definition2 is 'Definition of object in 2nd data source';
comment on column raw_differences.difference_type is 'type of difference recognized';
comment on column raw_differences.importance is 'Priority of difference - low values are most important';

--- Find all the items that generally match...
insert into raw_differences (label1, id1, object_type, object_schema, object_name, object_definition1, 
                             label2, id2, object_definition2, difference_type)
select r1.label, r1.id, r1.object_type, r1.object_schema, r1.object_name, r1.object_definition,
       r2.label, r2.id, r2.object_definition,
       case when r1.object_definition = r2.object_definition then 'match'
            else 'mismatch' end
from data_raw r1, data_raw r2
where r1.label = '${LABEL1}' and
      r2.label = '${LABEL2}' and
      r1.object_type = r2.object_type and
      r1.object_name = r2.object_name;

insert into raw_differences (label1, id1, object_type, object_schema, object_name, object_definition1, difference_type)
select r1.label, r1.id, r1.object_type, r1.object_schema, r1.object_name, r1.object_definition, 'missing in 2nd DB'
from data_raw r1
where not exists (select 1 from data_raw r2 where
                 r1.object_type = r2.object_type and
                 r1.object_name = r2.object_name);

insert into raw_differences (label1, id1, object_type, object_schema, object_name, object_definition1, difference_type)
select r1.label, r1.id, r1.object_type, r1.object_schema, r1.object_name, r1.object_definition, 'missing in 2nd DB'
from data_raw r1
where 
     r1.label = '${LABEL1}' and
     not exists (select 1 from data_raw r2 where
                 r1.object_type = r2.object_type and
                 r1.object_name = r2.object_name and r2.label <> r1.label)
union all
select r1.label, r1.id, r1.object_type, r1.object_schema, r1.object_name, r1.object_definition, 'missing in 1st DB'
from data_raw r1
where 
     r1.label = '${LABEL2}' and
     not exists (select 1 from data_raw r2 where
                 r1.object_type = r2.object_type and
                 r1.object_name = r2.object_name and r2.label <> r1.label);

create index rd_label1 on raw_differences(label1);
create index rd_id1 on raw_differences(id1);
create index rd_type on raw_differences(object_type);
create index rd_name on raw_differences(object_name);
create index rd_schema on raw_differences(object_schema);
create index rd_label2 on raw_differences(label2);
create index rd_id2 on raw_differences(id2);

update raw_differences 
  set importance = NULL
  where difference_type = 'match';

update raw_differences 
  set importance = 1
  where difference_type = 'mismatch';

update raw_differences 
  set importance = 2
  where difference_type like 'missing in % DB';

-- If schema is missing, then bump up all importances for all objects
-- in that schema to indicate diminished importance
update raw_differences
  set importance = importance + 1
  where difference_type like 'missing in %DB' and
        object_schema in (select object_schema from raw_differences where difference_type like 'missing in %DB' and object_type = 'schema')
        and object_type <> 'schema' ;

-- If table is missing, then bump up importances for subservient
-- objects

update raw_differences rd
  set importance = importance + 1
  where difference_type like 'missing in %DB' and
        object_type in ('table owner', 'table permissions', 'trigger', 'column', 'foreign key', 'index') and exists
        (select 1 from raw_differences rdt where rdt.difference_type like 'missing in %DB' and
                       rdt.object_type = 'table' and rdt.object_schema = rd.object_schema and
                       (rd.object_name = rdt.object_name or rd.object_name like (rdt.object_name || '.%')));

update raw_differences rd
  set importance = importance + 1
  where difference_type like 'missing in %DB' and
        object_type in ('column', 'view permissions', 'view owner', 'view definition') and exists
        (select 1 from raw_differences rdt where rdt.difference_type like 'missing in %DB' and
                       rdt.object_type = 'view' and rdt.object_schema = rd.object_schema and
                       (rd.object_name = rdt.object_name or rd.object_name like (rdt.object_name || '.%')));

update raw_differences rd
  set importance = importance + 1
  where difference_type like 'missing in %DB' and
        object_type in ('sequence permissions') and exists
        (select 1 from raw_differences rdt where rdt.difference_type like 'missing in %DB' and
                       rdt.object_type = 'sequence' and rdt.object_schema = rd.object_schema and
                       (rd.object_name = rdt.object_name or rd.object_name like (rdt.object_name || '.%')));

update raw_differences rd
  set importance = importance + 1
  where difference_type like 'missing in %DB' and
        object_type in ('data type owner') and exists
        (select 1 from raw_differences rdt where rdt.difference_type like 'missing in %DB' and
                       rdt.object_type = 'data type' and rdt.object_schema = rd.object_schema and
                       (rd.object_name = rdt.object_name or rd.object_name like (rdt.object_name || '.%')));

update raw_differences rd
  set importance = importance + 1
  where difference_type like 'missing in %DB' and
        object_type in 
               ('function definition', 'function config', 'function language',
                'function owner', 'function permissions', 'function security type')
         and exists
        (select 1 from raw_differences rdt where rdt.difference_type like 'missing in %DB' and
                       rdt.object_type = 'functiondefinition' and rdt.object_schema = rd.object_schema and
                       (rd.object_name = rdt.object_name or rd.object_name like (rdt.object_name || '.%')));

drop table if exists expected_differences;
create table expected_differences (
    object_type text,
    object_schema text,
    object_name text,
    difference_type text,
    difference_cause text,
    primary key(object_type, object_name, difference_type, difference_cause)
);

\\copy expected_differences from '${EXPLANATIONS}';

drop table if exists object_types;
create table object_types (
   object_type text primary key,
   description text
);

insert into object_types (object_type, description)
values 
('index', 'index on table'),
('check constraint', 'CHECK constraint on table'),
('foreign key', 'foreign key constraint'),
('data type', 'data type'),
('data type owner', 'owner of data type'),
('function config', 'stored function configuration (SET values and such)'),
('function definition', 'definition of stored function'),
('function language', 'language of implementation of stored function'),
('function owner', 'who owns this stored function?'),
('function security type', 'stored function SECURITY DEFINER (ala setuid)'),
('function permissions', 'per-role privileges for a stored function'),
('trigger', 'trigger'),
('operator', 'operator'),
('operator owner', 'owner of operator'),
('view definition', 'definition of VIEW'),
('view', 'basic information about VIEW'),
('view owner', 'owner of VIEW'),
('view permissions', 'permissions on VIEW'),
('table definition', 'definition of TABLE'),
('table', 'basic information about TABLE'),
('table owner', 'owner of TABLE'),
('table permissions', 'permissions on TABLE'),
('schema', 'schema/NAMESPACE'),
('schema permissions', 'permissions for schema'),
('sequence', 'sequence object'),
('sequence permissions', 'permissions for sequence object'),
('role', 'role (user/abstract role)'),
('column', 'attribute of table/view/sequence');

drop table if exists fulloutput;
create table fulloutput (
  object_name text,
  object_schema text,
  object_type text references object_types(object_type),
  label1 text,
  object_definition1 text,
  label2 text,
  object_definition2 text,
  difference_type text,
  difference_cause text
);
create index fo_main on fulloutput(object_name, object_type);

--- Perform full reconciliation

--- 1.   Expected case: perfect match, no explanation needed OR PROVIDED
insert into fulloutput (object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type, difference_cause)
select object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type, NULL::text
from raw_differences r where difference_type = 'match' and not exists
(select 1 from expected_differences d where r.object_name = d.object_name and r.object_type = d.object_type);

--- 2.  Not so much expected...  Perfect match, but we have a
---     reconciling entry indicating why there *shouldn't* be a match

insert into fulloutput (object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type, difference_cause)
select r.object_name, r.object_schema, r.object_type, r.label1, r.object_definition1, r.label2, r.object_definition2, r.difference_type, d.difference_cause
from raw_differences r, expected_differences d where r.difference_type = 'match' and 
r.object_name = d.object_name and r.object_type = d.object_type;

--- 3.  Expected...   missing, and explained...

insert into fulloutput (object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type, difference_cause)
select r.object_name, r.object_schema, r.object_type, r.label1, r.object_definition1, r.label2, r.object_definition2, r.difference_type, d.difference_cause
from raw_differences r, expected_differences d where r.difference_type in ('missing in 1st DB', 'missing in 2nd DB') and 
r.object_name = d.object_name and r.object_type = d.object_type;

--- 4.  Not expected...   missing, and NOT explained...

insert into fulloutput (object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type, difference_cause)
select r.object_name, r.object_schema, r.object_type, r.label1, r.object_definition1, r.label2, r.object_definition2, r.difference_type, NULL::text
from raw_differences r where r.difference_type in ('missing in 1st DB', 'missing in 2nd DB') and 
not exists 
(select 1 from expected_differences d where r.object_name = d.object_name and r.object_type = d.object_type);

--- 5.  Expected...   mismatch, and explained...

insert into fulloutput (object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type, difference_cause)
select r.object_name, r.object_schema, r.object_type, r.label1, r.object_definition1, r.label2, r.object_definition2, r.difference_type, d.difference_cause
from raw_differences r, expected_differences d where r.difference_type in ('mismatch') and 
r.object_name = d.object_name and r.object_type = d.object_type;

--- 6.  Not expected...   missing, and NOT explained...

insert into fulloutput (object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type, difference_cause)
select r.object_name, r.object_schema, r.object_type, r.label1, r.object_definition1, r.label2, r.object_definition2, r.difference_type, NULL::text
from raw_differences r where r.difference_type in ('mismatch') and 
not exists 
(select 1 from expected_differences d where r.object_name = d.object_name and r.object_type = d.object_type);

drop table if exists unexplained_items;
create table unexplained_items (
  object_name text,
  object_schema text,
  object_type text,
  label1 text,
  id1 integer,
  object_definition1 text,
  label2 text,
  id2 integer,
  object_definition2 text,
  difference_type text
);

insert into unexplained_items (object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type)
select object_name, object_schema, object_type, label1, object_definition1, label2, object_definition2, difference_type
from raw_differences r
where r.difference_type not in ('match') and
not exists 
(select 1 from expected_differences d where r.object_name = d.object_name and r.object_type = d.object_type);

\\copy fulloutput to '${FULLOUTPUT}';
\\copy unexplained_items to '${UNEXPLAINED}';

drop table if exists badexplanations_items;
create table badexplanations_items as
select object_type, object_schema, object_name, difference_type, 'Not Yet Properly Explained'::text as difference_cause
from unexplained_items
union all
select object_type, object_schema, object_name, difference_type, 'Still Not Properly Explained'::text as difference_cause
from expected_differences where difference_cause in ('Not Properly Yet Explained', 'Still Not Properly Explained')
union all
select object_type, object_schema, object_name, difference_type, 'Misexplained'
from expected_differences d 
  where exists (select 1 from raw_differences r where r.object_type = d.object_type and r.object_name = d.object_name and r.difference_type <> d.difference_type);

\echo Results Summary
select object_type, difference_type, difference_cause, count(*) from fulloutput group by 2, 1, 3 order by 2, 1, 3;

\\copy badexplanations_items to '${BADEXPLAIN}';

\echo Inadequately Explained Items
select object_type, object_name, difference_type, difference_cause from badexplanations_items order by object_type, object_name;

"
echo "${COMPARESCRIPT}" > ${WORKDIR}/load-comparison-data.sql

${PSQL} -d ${DBW} -h ${HOSTW} -p ${PORTW} -U ${USERW} -f ${WORKDIR}/load-comparison-data.sql > ${WORKDIR}/perform-comparison.log 2>&1 
if [ $retcode -ne 0 ]; then
    echo "Could not run comparison against database PGDATA=${DBW} PGHOST=${HOSTW} PGPORT=${PORTW} PGUSER=${USERW}"
    echo "See comparison log: ${WORKDIR}/perform-comparison.log"
    exit 2
fi

if [[ -s ${BADEXPLAIN} ]] ; then
    baditemcount=`wc -l ${BADEXPLAIN}`
    echo "Number of items inadequately explained: ${baditemcount}"
    exit 3
fi

exit 0
